import arcade
import random
import os
import math

SPRITE_SCALING_NAVE = 0.2
SPRITE_SCALING_ENEMY = 0.1
SPRITE_SCALING_BULLET = 0.5
MOVEMENT_SPEED = 3
ENEMY_COUNT = 10
VIEWPORT_MARGIN = 40
SCREEN_WIDTH = 1200
SCREEN_HEIGHT = 800
SCREEN_TITLE = "HOLLOW RIDERS"
"""Para que no se sobrecargue todo de balas he puesto que haya un limite de balas en pantalla"""
MAX_PLAYER_BULLETS = 10
MAX_ENEMY1_BULLETS = 1
BULLET_SPEED = 6
MUSIC_VOLUME = 1

"""Estado del juego"""
GAME_OVER = 1
PLAY_GAME = 0


def bordes():
    """" Los bordes para poner imagenes en ellos la puntuacion etc """
    arcade.draw_lrtb_rectangle_filled(0, 200, 800, 0, arcade.csscolor.BLUE)
    arcade.draw_lrtb_rectangle_filled(1000, 1200, 800, 0, arcade.csscolor.BLUE)

class Explosion(arcade.Sprite):
    """Esta clase creara una explosion de forma animada"""
    def __init__(self, texture_list):
        super().__init__()
        self.current_texture = 0
        self.textures = texture_list
    def update(self):
        self.current_texture += 1
        if self.current_texture < len(self.textures):
            self.set_texture(self.current_texture)
        else:
            self.remove_from_sprite_lists()

class nave(arcade.Sprite):
    def update(self):
        """Las cordenadas x e y que vayan variando segun su posicion y los limites a los que puede llegar la nave"""
        self.center_x += self.change_x
        self.center_y += self.change_y

        """Sistema de margenes que hay que implementar"""
        if self.left < 201:
            self.left = 201
        elif self.right > 1000 - 1:
            self.right = 1000 - 1
        if self.bottom < 0:
            self.bottom = 0
        elif self.top > 400 - 1:
            self.top = 400 - 1

class MyGame(arcade.Window):
    def __init__(self):
        super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_TITLE, fullscreen= False)
        """La biblioteca "os" permite localizar archivos lo que permmite importar imagenes mas facilmente"""
        file_path = os.path.dirname(os.path.abspath(__file__))
        os.chdir(file_path)

        """Parte de la programacion para pantalla completa"""
        width, height = self.get_size()
        self.set_viewport(0, width, 0, height)

        self.game_state = PLAY_GAME

        self.frame_count = 0

        self.nave_list = None
        self.enemy_list = None
        self.bullet_list = None
        self.nave_sprite = None
        self.explosions_list = None
        self.enemybullet_list = None
        self.score = 0
        self.Vidas = 3
        """Para que no moleste el raton mientras juegas"""
        self.set_mouse_visible(False)

        """Tama√±o de la explosion cuando derribas una nave"""
        self.explosion_texture_list = []
        columns = 16
        count = 60
        sprite_width = 256
        sprite_height = 256
        explosion = ":resources:images/spritesheets/explosion.png"
        self.explosion_texture_list = arcade.load_spritesheet(explosion, sprite_width, sprite_height, columns, count)


        self.gun_sound = arcade.load_sound(":resources:sounds/hurt5.wav")
        self.hit_sound = arcade.load_sound(":resources:sounds/hit5.wav")

        arcade.set_background_color(arcade.color.BLACK)

    def setup(self):
        self.nave_list = arcade.SpriteList()
        self.enemy_list = arcade.SpriteList()
        self.enemybullet_list = arcade.SpriteList()
        self.bullet_list = arcade.SpriteList()
        self.explosions_list = arcade.SpriteList()
        self.Vidas = 3
        self.score = 0
        self.nave_sprite = nave(":resources:images/practicas/nave.png", SPRITE_SCALING_NAVE)
        self.nave_sprite.center_x = 600
        self.nave_sprite.center_y = 75
        self.nave_list.append(self.nave_sprite)

        self.left_pressed = False
        self.right_pressed = False
        self.up_pressed = False
        self.down_pressed = False

        for i in range(ENEMY_COUNT):
            """Aparicion de enemigos en posiciones randomizadas dentro de unas cordenadas"""
            enemy1 = arcade.Sprite(":resources:images/practicas/BichoMalo.png", SPRITE_SCALING_ENEMY)
            enemy1.center_x = random.randrange(340, 840)
            enemy1.center_y = random.randrange(400, SCREEN_HEIGHT)
            self.enemy_list.append(enemy1)
        arcade.set_background_color(arcade.color.BLACK)

    def on_draw(self):
        arcade.start_render()

        bordes()
        self.enemy_list.draw()
        self.bullet_list.draw()
        self.nave_list.draw()
        self.enemybullet_list.draw()
        self.explosions_list.draw()
        """El sistema de puntuaciones y de vida"""
        arcade.draw_text(f"Score: {self.score}" , 10, 20, arcade.color.WHITE, 14)
        arcade.draw_text(f"Vidas: {self.Vidas}" , 10, 40, arcade.color.WHITE, 14)
        arcade.draw_text(f"Pulsa B para pantalla completa\ny V para modo ventana", 10, 750, arcade.color.WHITE, 12)

        if self.game_state == GAME_OVER:
            arcade.draw_text(f"GAME OVER", 400, 600, arcade.color.WHITE, 60)
            self.set_mouse_visible(True)

    def on_key_press(self, key, modifiers):
        """La programacion de movimiento tanto si quieres moverlo con WASD como si quieres moverlo con las letras"""
        if key == arcade.key.W:
            self.up_pressed = True
        elif key == arcade.key.S:
            self.down_pressed = True
        elif key == arcade.key.A:
            self.left_pressed = True
        elif key == arcade.key.D:
            self.right_pressed = True

        if key == arcade.key.UP:
            self.up_pressed = True
        elif key == arcade.key.DOWN:
            self.down_pressed = True
        elif key == arcade.key.LEFT:
            self.left_pressed = True
        elif key == arcade.key.RIGHT:
            self.right_pressed = True
        """Pantalla completa"""
        if key == arcade.key.V:
            self.set_fullscreen(not self.fullscreen)
            width, height = self.get_size()
            self.set_viewport(0, width, 0, height)
        """Modo ventana"""
        if key == arcade.key.B:
            self.set_fullscreen(not self.fullscreen)
            self.set_viewport(0, SCREEN_WIDTH, 0, SCREEN_HEIGHT)

        if key == arcade.key.SPACE:
            if len(self.bullet_list) < MAX_PLAYER_BULLETS:
                    arcade.play_sound(self.gun_sound)
                    bullet = arcade.Sprite(":resources:images/space_shooter/laserBlue01.png", SPRITE_SCALING_BULLET)
                    bullet.angle = 90
                    bullet.change_y = BULLET_SPEED
                    bullet.center_x = self.nave_sprite.center_x
                    bullet.bottom = self.nave_sprite.top
                    self.bullet_list.append(bullet)


    def on_key_release(self, key, modifiers):
        if key == arcade.key.UP:
            self.up_pressed = False
        elif key == arcade.key.DOWN:
            self.down_pressed = False
        elif key == arcade.key.LEFT:
            self.left_pressed = False
        elif key == arcade.key.RIGHT:
            self.right_pressed = False

        if key == arcade.key.W:
            self.up_pressed = False
        elif key == arcade.key.S:
            self.down_pressed = False
        elif key == arcade.key.A:
            self.left_pressed = False
        elif key == arcade.key.D:
            self.right_pressed = False

    def on_mouse_press(self, x, y, button, modifiers):
        """Sistema de disparo totalmente vertical que se ejecuta si pulsas el boton izq del raton"""
        if len(self.bullet_list) < MAX_PLAYER_BULLETS:
                arcade.play_sound(self.gun_sound)
                bullet = arcade.Sprite(":resources:images/space_shooter/laserBlue01.png", SPRITE_SCALING_BULLET)
                bullet.angle = 90
                bullet.change_y = BULLET_SPEED
                bullet.center_x = self.nave_sprite.center_x
                bullet.bottom = self.nave_sprite.top
                self.bullet_list.append(bullet)

    def on_update(self, delta_time):
        self.frame_count += 1
        self.bullet_list.update()
        self.nave_list.update()
        self.explosions_list.update()
        self.nave_sprite.change_x = 0
        self.nave_sprite.change_y = 0

        """Para calculaar la velocidad segun las teclas que pulses"""
        if self.up_pressed and not self.down_pressed:
            self.nave_sprite.change_y = MOVEMENT_SPEED
        elif self.down_pressed and not self.up_pressed:
            self.nave_sprite.change_y = -MOVEMENT_SPEED
        if self.left_pressed and not self.right_pressed:
            self.nave_sprite.change_x = -MOVEMENT_SPEED
        elif self.right_pressed and not self.left_pressed:
            self.nave_sprite.change_x = MOVEMENT_SPEED
        self.nave_list.update()

        """Para que la bala no atraviese objetivos y si das a un objetivo que te sume un punto"""
        for bullet in self.bullet_list:
            hit_list = arcade.check_for_collision_with_list(bullet, self.enemy_list)
            if len(hit_list) > MAX_ENEMY1_BULLETS:
                explosion = Explosion(self.explosion_texture_list)
                explosion.center_x = hit_list[0].center_x
                explosion.center_y = hit_list[0].center_y
                explosion.update()
                self.explosions_list.append(explosion)
                bullet.remove_from_sprite_lists()
            """Para que cuando mates a un enemigo desaparezca la bala y no siga"""
            for enemy1 in hit_list:
                enemy1.remove_from_sprite_lists()
                self.score +=1
                arcade.play_sound(self.hit_sound)
            if bullet.bottom > SCREEN_HEIGHT:
                bullet.remove_from_sprite_lists()
            """Cuando estas a cero vidas no puedes disparar"""
            if self.Vidas <= 0:
                bullet.remove_from_sprite_lists()
        self.bullet_list.update()

        """Toda la programacion para que los enemigos te miren y te disparen, esta hecho gracias a la bibliteca math para aprovechar los angulos"""
        for enemy1 in self.enemy_list:
            start_x = enemy1.center_x
            start_y = enemy1.center_y
            dest_x = self.nave_sprite.center_x
            dest_y = self.nave_sprite.center_y
            x_diff = dest_x - start_x
            y_diff = dest_y - start_y
            angle = math.atan2(y_diff, x_diff)
            enemy1.angle = math.degrees(angle) - 90

            """Los enemigos te apuntan y no disparan todos a la vez si no en una franja de tiempo"""
            if random.randrange(200) == 0:
                enemy1bullet = arcade.Sprite(":resources:images/space_shooter/laserBlue01.png", SPRITE_SCALING_BULLET)
                enemy1bullet.center_x = start_x
                enemy1bullet.center_y = start_y
                enemy1bullet.angle = math.degrees(angle)
                enemy1bullet.change_x = math.cos(angle) * BULLET_SPEED
                enemy1bullet.change_y = math.sin(angle) * BULLET_SPEED
                self.enemybullet_list.append(enemy1bullet)

        """Que los enemigos puedan golpearte y te quiten vidas"""
        for enemy1bullet in self.enemybullet_list:
            hit_list2 = arcade.check_for_collision_with_list(enemy1bullet, self.nave_list)
            for self.nave_sprite in hit_list2:
                self.Vidas -= 1
                arcade.play_sound(self.hit_sound)
                enemy1bullet.remove_from_sprite_lists()
                if self.Vidas <= 0:
                    self.game_state = GAME_OVER
                    explosionnave = Explosion(self.explosion_texture_list)
                    explosionnave.center_x = hit_list2[0].center_x
                    explosionnave.center_y = hit_list2[0].center_y
                    explosionnave.update()
                    self.explosions_list.append(explosionnave)
                    enemy1bullet.remove_from_sprite_lists()
                    self.nave_sprite.remove_from_sprite_lists()
                    self.enemybullet_list.append(enemy1bullet)

        """Si tienes 0 vidas mueres"""
        for enemy1bullet in self.enemybullet_list:
            if enemy1bullet.top < 0:
                enemy1bullet.remove_from_sprite_lists()
            elif enemy1bullet.center_x < 201:
                enemy1bullet.remove_from_sprite_lists()
            elif enemy1bullet.top > 1001:
                enemy1bullet.remove_from_sprite_lists()
            elif self.Vidas <= 0:
                enemy1bullet.remove_from_sprite_lists()
        self.enemybullet_list.update()

def main():
    window = MyGame()
    window.setup()
    arcade.run()

if __name__ == "__main__":
    main()
